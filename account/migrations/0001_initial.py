# Generated by Django 4.0.3 on 2022-11-18 11:36

import account.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_active', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('username', models.CharField(max_length=100, unique=True)),
                ('avatar', models.ImageField(null=True, upload_to='images/users/avatar/%Y/%m/%d/')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('created', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('verify_email', models.BooleanField(default=False)),
                ('user_group', models.CharField(choices=[('confirmed_author', 'confirmed author'), ('not_confirmed_author', 'not confirmed author'), ('moderator', 'moderator'), ('user', 'user')], default='user', max_length=50, verbose_name='group_users')),
                ('facebook', models.CharField(blank=True, max_length=100, null=True)),
                ('twiter', models.CharField(blank=True, max_length=100, null=True)),
                ('instagram', models.CharField(blank=True, max_length=100, null=True)),
                ('pinterest', models.CharField(blank=True, max_length=100, null=True)),
                ('dribbble', models.CharField(blank=True, max_length=100, null=True)),
                ('behance', models.CharField(blank=True, max_length=100, null=True)),
                ('linkedin', models.CharField(blank=True, max_length=100, null=True)),
                ('github', models.CharField(blank=True, max_length=100, null=True)),
                ('figma', models.CharField(blank=True, max_length=100, null=True)),
                ('website_url', models.CharField(blank=True, max_length=100, null=True)),
                ('bio', models.TextField(max_length=500, null=True)),
                ('is_affiliate', models.BooleanField(default=False)),
                ('subscriptions', models.CharField(blank=True, choices=[('freebello', 'freebello')], max_length=100, null=True)),
                ('black_list', models.ManyToManyField(related_name='bloced_users', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', account.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Moderator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shop_notifications', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile_moderator', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
